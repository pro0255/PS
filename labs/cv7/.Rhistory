install.packages("readxl")
install.packages("moments")
# Aktivace knihovny (nutno opakovat při každém novém spuštění Rka, vhodné mít na začátku skriptu)
library(readxl)
library(moments)
# Výpis pracovního adresáře (také je vidět v záhlaví Console)
getwd()
data = read_excel("aku.xlsx",
sheet = "Data",           # specifikace listu v xlsx souboru
skip = 3)
View(data)
# Přejmenování sloupců - je-li nutné
colnames(data) = c("A5","B5","C5","D5","A100","B100","C100","D100")
# Objekt typu "tibble" vznikne i importem dat pomocí funkce read_excel()
class(data)
# Proto provedeme změnu datové struktury na datový rámec - data.frame
data = as.data.frame(data)
class(data)
# Zobrazení 3. sloupce - několik způsobů
data[ , 3]
# nebo (víme-li, jak se jmenuje proměnná zapsána ve 3. sloupci)
data[["C5"]]
# nebo
data$C5 # nejpoužívanější
data5 = data[,1:4] # z dat vybereme ty sloupce, které odpovídají měřením po 5 cyklech
View(data5)
colnames(data5) = c("A","B","C","D") # přejmenujeme sloupce
# Totéž provedeme pro měření provedené po 100 cyklech
data100 = data[,5:8] # z dat vybereme ty sloupce, které odpovídají měřením po 100 cyklech
colnames(data100) = c("A","B","C","D") # přejmenujeme sloupce
View(data100)
View(data100)
View(data5)
data5S = stack(data5)
View(data5S)
colnames(data5S) = c("kap5", "vyrobce")
data100S = stack(data100)
colnames(data100S) = c("kap100", "vyrobce")
View(data100S)
# Sloučením dostaneme std. datový formát se všemi údaji (jupí!)
dataS = cbind(data5S, data100S)
View(dataS)
# Provedeme ještě kosmetické úpravy (odstranění nadbytečného sloupce a vyřešení NA)
dataS = dataS[,-2] # vynecháme nadbytečný druhý sloupec
View(dataS)
View(dataS)
dataS = na.omit(dataS) # vynecháme řádky s NA hodnotami
View(dataS)
# Definování nové proměnné pokles
dataS$pokles = dataS$kap5 - dataS$kap100
dataS$pokles_dich = ifelse(dataS$pokles > 100, 'spatny', 'dobry')
class(dataS$vyrobce) # kontrola datového typu
summary(dataS$kap5)
# Výpočet průměru jedné proměnné
mean(dataS$kap5)
mean(data$C5,na.rm=TRUE)
# Výpočet mediánu jedné proměnné
quantile(dataS$kap5, probs=0.5)
# Určení rozsahu výběru (tj. počet statistických jednotek - počet akumulátorů)
length(dataS$kap5)
# Pozor! Funkce pro výpočet šikmosti (skewness) a špičatosti (kurtosis) nejsou součástí základního R, najdete je v balíčku moments
# Normálnímu rozdělení odpovídá špičatost 3, resp. špičatost v intervalu (1,5)
# Pro standardizaci špičatosti je nutno od vypočtené hodnoty odečíst 3.
# Napíšete-li před název funkce název balíčku a "::", zajistíte tím, že bude použita funkce z daného balíčku
# Nutno ohlídat, když jsou v různých balíčcích definovány různé funkce pod stejným jménem
moments::skewness(dataS$kap5)
moments::kurtosis(dataS$kap5)-3
# Chceme-li spočítat danou charakteristiku pro proměnnou kapacita po 5 cyklech podle výrobců, můžeme použít funkci tapply
tapply(dataS$kap5, dataS$vyrobce, mean, na.rm = T)
library(dplyr)
dataS %>%
summarise(rozsah = length(kap5),
minimum = min(kap5, na.rm=T),     # preventivní na.rm=T
Q1 = quantile(kap5, 0.25, na.rm=T),
prumer = mean(kap5, na.rm=T),
median = median(kap5, na.rm=T),
Q3 = quantile(kap5, 0.75, na.rm=T),
maximum = max(kap5, na.rm=T),
rozptyl = var(kap5, na.rm=T),
smerodatna_odchylka = sd(kap5,na.rm=T),
variacni_koeficient = (100*(smerodatna_odchylka/prumer)),  # variační koeficient v procentech
sikmost = (moments::skewness(kap5, na.rm=T)),       # preventivní specifikace balíčku moments
spicatost = (moments::kurtosis(kap5, na.rm=T)-3))
charakteristiky_dle_vyrobce =
dataS %>%
group_by(vyrobce) %>%
summarise(rozsah = length(kap5),
minimum = min(kap5, na.rm=T),     # preventivní na.rm=T
Q1 = quantile(kap5, 0.25, na.rm=T),
prumer = mean(kap5, na.rm=T),
median = median(kap5, na.rm=T),
Q3 = quantile(kap5, 0.75, na.rm=T),
maximum = max(kap5, na.rm=T),
rozptyl = var(kap5, na.rm=T),
smerodatna_odchylka = sd(kap5,na.rm=T),
variacni_koeficient = (100*(smerodatna_odchylka/prumer)),  # variační koeficient v procentech
sikmost = (moments::skewness(kap5, na.rm=T)),       # preventivní specifikace balíčku moments
spicatost = (moments::kurtosis(kap5, na.rm=T)-3))
View(charakteristiky_dle_vyrobce)
write.csv2(charakteristiky_dle_vyrobce, file="tmp.csv")
par(mfrow = c(1,1),   # jednoduché rozdělení grafického okna - 1 řádek, 1 sloupec
mar = c(4,4,3,2), # okraje kolem každého z grafů v počtech řádků - - c(dole, vlevo, nahoře, vpravo)
oma = c(1,1,1,1)) # vnější okraje v počtech řádků - c(dole, vlevo, nahoře, vpravo)
# Jednoduché a rychlé vykreslení pomocí základní funkce boxplot()
boxplot(dataS$kap5)
boxplot(dataS$kap5,
main = "Kapacita po 5 cyklech (mAh)",
ylab = "kapacita (mAh)",
col = "lightblue")
points(1, mean(dataS$kap5,na.rm=TRUE), pch=3) # do stávajícího grafu doplní bod znázorňující průměr
boxplot(dataS$kap5,
main = "Kapacita po 5 cyklech (mAh)",
ylab = "kapacita (mAh)",
col = "lightblue") #jsou preferovany odstiny sedi
points(1, mean(dataS$kap5,na.rm=TRUE), pch=3) # do stávajícího grafu doplní bod znázorňující průměr
boxplot(dataS$kap5,
horizontal = TRUE,  # při horizontální orientaci je třeba si ohlídat opačné nastavení popisků
xlab = "kapacita (mAh)",
boxwex = 0.5)      # změní šířku krabice na 1/2
points(1, mean(dataS$kap5,na.rm=TRUE), pch=3) # do stávajícího grafu doplní bod znázorňující průměr
points(1, mean(dataS$kap5,na.rm=TRUE), pch=3) # do stávajícího grafu doplní bod znázorňující průměr
# A ještě vykreslení vícenásobného krabicového grafu (který by šel dále graficky upravit)
boxplot(dataS$kap5~dataS$vyrobce)
# Jednoduché a rychlé vykreslení
hist(dataS$kap5)
hist(dataS$kap5, breaks=10) # Co dělají různé hodnoty parametru breaks s grafem?
hist(dataS$kap5, breaks=50) # Co dělají různé hodnoty parametru breaks s grafem?
hist(dataS$kap5, breaks=5) # Co dělají různé hodnoty parametru breaks s grafem?
# Jednoduché a rychlé vykreslení
hist(dataS$kap5)
hist(dataS$kap5, breaks=5) # Co dělají různé hodnoty parametru breaks s grafem?
hist(dataS$kap5,
main = "Histogram pro kapacitu akumulátorů po 5 cyklech",
xlab = "kapacita (mAh)",
ylab = "četnost",
ylim = c(0, 85),
col = "lightblue",       # barva výplně
border = "black",       # barva ohraničení sloupců
labels = TRUE)         # přidá absolutní četnosti daných kategorií ve formě popisků
hist(dataS$kap5,
main = "Histogram pro kapacitu akumulátorů po 5 cyklech",
xlab = "kapacita (mAh)",
ylab = "f(x)",
ylim = c(0, 0.006),
col = "cadetblue1",
border = "grey",
freq = FALSE)
lines(density(dataS$kap5))        # připojí graf odhadu hustoty pravděpodobnosti
# Generování hustoty normálního rozdělení a přidání k histogramu
xfit = seq(min(dataS$kap5), max(dataS$kap5), length = 40)     # generování hodnot pro osu x
yfit = dnorm(xfit, mean = mean(dataS$kap5), sd = sd(dataS$kap5))  # generování hodnot pro osu y
lines(xfit, yfit, col = "black", lwd = 2)    # do posledního grafu přidání křivky na základě výše vygenerovaných hodnot
hist(dataS$kap5[dataS$vyrobce == "A"],
main = "Histogram pro kapacitu akumulátorů po 5 cyklech, výrobce A",
xlab = "kapacita (mAh)",
ylab = "četnost",
xlim = c(1850, 2100),
ylim = c(0, 30),
col = "lightblue",       # barva výplně
border = "black",       # barva ohraničení sloupců
labels = TRUE)         # přidá absolutní četnosti daných kategorií ve formě popisků
# Jednoduché a velmi rychlé vykreslení, např. pro kapacitu po 5 cyklech pro výrobce A
qqnorm(dataS$kap5[dataS$vyrobce == "A"])
qqline(dataS$kap5[dataS$vyrobce == "A"])
# ... s úpravou popisků os...
qqnorm(dataS$kap5[dataS$vyrobce == "A"],
xlab = "Teoretické normované kvantily",
ylab = "Výběrové kvantily",
main = "QQ-graf, kapacita po 5 cyklech, výrobce A")
qqline(dataS$kap5[dataS$vyrobce == "A"])
library(readxl)
library(moments)
data = read_excel("aku.xlsx",
sheet = "Data",           # specifikace listu v xlsx souboru
skip = 3)                 # řádky, které je potřeba přeskočit
# Přejmenování sloupců - je-li nutné
colnames(data) = c("A5","B5","C5","D5","A100","B100","C100","D100")
## Poznámka (kterou je dobré dočíst až do konce....)
# Vždy je možné importovat pomocí "Import Dataset" z okna Environment bez nutnosti psát kód
# V tom případě ale nesmí být v "cestě" k souboru žádné speciální znaky (háčky, čárky). Jinak se objeví error.
# Objekt importovaný touto cestou bude v novém RStudiu jako typ "tibble".
# Jedná se o modernější "data.frame" a v některých funkcích může dělat problémy a házet errory!
# Jednoduše lze tento objekt převést na typ data.frame pomocí as.data.frame().
# Objekt typu "tibble" vznikne i importem dat pomocí funkce read_excel()
class(data)
# Proto provedeme změnu datové struktury na datový rámec - data.frame
data = as.data.frame(data)
class(data)
#//////////////////////////////////////////////////////////////////////////////////////
## 3. Preprocessing dat aneb cesta ke standardnímu datovému formátu ###############
#* 3.1 Výběr proměnných #######
# Zobrazení 3. sloupce - několik způsobů
data[ , 3]
# nebo (víme-li, jak se jmenuje proměnná zapsána ve 3. sloupci)
data[["C5"]]
# nebo
data$C5 # nejpoužívanější
# Uložení prvního a pátého sloupce dat. rámce data do dat. rámce pokus
pokus = data[ , c(1, 5)]
# Vyloučení prvního a pátého sloupce z dat. rámce data a uložení do dat. rámce pokus
pokus = data[ ,-c(1, 5)]
#/////////////////////////////////////////////////////////////////////////////////////
#* 3.2 Uložení menších logických celků #######
# Často se hodí provést vytvoření několika menších logických celků (např. uložit si zvlášť měření po 5 cyklech).
# Tyto menší logické celky pak můžou pomoct právě při vytváření std. datového formátu.
# Pozn. při ukládání dat mysleme na přehlednost v názvech!
data5 = data[,1:4] # z dat vybereme ty sloupce, které odpovídají měřením po 5 cyklech
colnames(data5) = c("A","B","C","D") # přejmenujeme sloupce
# Totéž provedeme pro měření provedené po 100 cyklech
data100 = data[,5:8] # z dat vybereme ty sloupce, které odpovídají měřením po 100 cyklech
colnames(data100) = c("A","B","C","D") # přejmenujeme sloupce
# Výše vytvořené soubory neodpovídají std. datovému formátu.
# O převedení se jednoduše postará funkce stack().
data5S = stack(data5)
colnames(data5S) = c("kap5", "vyrobce")
data100S = stack(data100)
colnames(data100S) = c("kap100", "vyrobce")
# Možná se ptáte, proč nepoužít funkci stack() na původní importovaná data (data).
# Funkce stack() funguje totiž tak, že všechny sloupce seřadí do jednoho sloupce
# a vytvoří k nim nový sloupec jako identifikátor toho, odkud původně (z jakého sloupce)
# pocházely. To se nám na původní data tedy nehodí.
# Z toho důvodu jsme si zcela záměrně cestu ke std. datovému formátu takto "rozkouskovali".
# V další části už připravené menší logické celky sloučíme.
#/////////////////////////////////////////////////////////////////////////////////////
#* 3.3 Sestavení std. datového formátu #######
# Sloučením dostaneme std. datový formát se všemi údaji (jupí!)
dataS = cbind(data5S, data100S)
# Provedeme ještě kosmetické úpravy (odstranění nadbytečného sloupce a vyřešení NA)
dataS = dataS[,-2] # vynecháme nadbytečný druhý sloupec
dataS = na.omit(dataS) # vynecháme řádky s NA hodnotami
# !!! S funkci na.omit zacházejte extrémně opatrně, abyste nechtěně nepřišli o data !!!
# Přímočará cesta vede skrze funkci reshape(), která je ale obtížnější na pochopení a použití.
# Její použití je demonstrováno v Rozšířeném skriptu ve stejně očíslované podkapitole.
# Na rovinu je potřeba přiznat, že tento preprocessing bychom zvládli i ručně v Excelu.
# To znamená není vůbec špatnou cestou si potřebné úpravy do std. datového formátu provést přímo v něm.
#/////////////////////////////////////////////////////////////////////////////////////
#* 3.4 Definování nové proměnné ve std. datovém formátu #######
# Definování nové proměnné pokles
dataS$pokles = dataS$kap5 - dataS$kap100
dataS$pokles_dich = ifelse(dataS$pokles > 100, 'spatny', 'dobry')
#/////////////////////////////////////////////////////////////////////////////////////
#* 3.5 Výběr ze std. datového formátu na základě dané podmínky #######
# Prozkoumejte následující příkazy a pochopte jejich strukturu
dataS[dataS$vyrobce == "A", ]
dataS$kap5[dataS$vyrobce == "A"]
dataS[dataS$vyrobce %in% c("A", "B"), c("kap100", "vyrobce")]
# Výše uvedené je vhodné, pokud si potřebujeme vytvořit zcela samostatné proměnné
# Např. proměnnou a5, která obsahuje kapacity po 5 cyklech akumulátorů od výrobce A
a5 = dataS$kap5[dataS$vyrobce=="A"]
# Ruční odstranění - využití funkce boxplot s parametrem plot = F - s ohledem na výrobce
pom = boxplot(dataS$kap5~dataS$vyrobce, plot = F)
pom   # v pom$out jsou uložena odlehlá pozorování detekována metodou vnitřních hradeb,
# Tyto konkrétní hodnoty jsou pak označeny v novém sloupci kap5_out jako NA
# POZOR! Nikdy si nepřepisujeme původní proměnné!!!
dataS$kap5_out = dataS$kap5
dataS$kap5_out[dataS$vyrobce == "A" & dataS$kap5 >= 2023] = NA
dataS$kap5_out[dataS$vyrobce == "C" & dataS$kap5 == 1848.4] = NA
dataS$kap5_out[dataS$vyrobce == "D" & dataS$kap5 == 1650.3] = NA
#vime:
# n = 40, u = 28, s = 2^2
# N(u=28,s^2/n=4/40)
#
pnorm(31, 28, sqrt(4/40)) - pnorm(29, 28, sqrt(4/40))
##b
1 - pt(-3.162, 39)
1- pnorm(880000, 60*15000, sqrt(60*(2000^2)))
x = (49*(50^2))/(45^2)
1 - chisq(x, 49)
1 - pchisq(x, 49)
